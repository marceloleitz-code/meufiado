:root {
    --primary: #4CAF50;
    --primary-dark: #388E3C;
    --secondary: #FF9800;
    --secondary-dark: #F57C00;
    --dark: #333;
    --light: #f9f9f9;
    --danger: #f44336;
    --success: #4CAF50;
    --warning: #ff9800;
    --gray: #757575;
    --background: #f5f5f5;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

body {
    background-color: var(--background);
    color: var(--dark);
    line-height: 1.6;
}

.container {
    max-width: 100%;
    padding: 16px;
    padding-bottom: 80px;
}

header {
    background: linear-gradient(135deg, var(--primary), var(--primary-dark));
    color: white;
    padding: 20px 16px;
    text-align: center;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    position: relative;
    border-radius: 0 0 15px 15px;
    margin-bottom: 20px;
}

.logo {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    margin-bottom: 5px;
}

.logo i {
    font-size: 28px;
    color: var(--dark);
}

.logo h1 {
    font-size: 24px;
    font-weight: 700;
    color: var(--dark);
}

.header-subtitle {
    font-size: 14px;
    opacity: 0.9;
}

.user-type {
    display: flex;
    justify-content: center;
    margin: 20px 0;
    border-bottom: 1px solid #ddd;
    padding-bottom: 20px;
}

.user-type-btn {
    padding: 12px 24px;
    border: none;
    background: #eee;
    margin: 0 8px;
    border-radius: 25px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.3s;
    display: flex;
    align-items: center;
    gap: 8px;
}

.user-type-btn.active {
    background: var(--primary);
    color: white;
    box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}

.user-type-btn i {
    font-size: 18px;
}

.card {
    background: white;
    padding: 20px;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.08);
    margin-bottom: 20px;
}

h2 {
    margin-bottom: 16px;
    color: var(--dark);
    font-size: 20px;
}

input, select, textarea {
    width: 100%;
    padding: 14px;
    margin-bottom: 16px;
    border: 1px solid #ddd;
    border-radius: 8px;
    font-size: 16px;
    transition: border 0.3s;
}

input:focus, select:focus, textarea:focus {
    border-color: var(--primary);
    outline: none;
}

button {
    background-color: var(--primary);
    color: var(--dark);
    border: none;
    padding: 14px;
    border-radius: 8px;
    cursor: pointer;
    width: 100%;
    font-weight: bold;
    font-size: 16px;
    transition: background 0.3s;
}

button:hover {
    background-color: var(--primary-dark);
}

button.secondary {
    background-color: var(--secondary);
}

button.secondary:hover {
    background-color: var(--secondary-dark);
}

.hidden {
    display: none;
}

.balance {
    text-align: center;
    padding: 25px 20px;
    background: linear-gradient(135deg, #f4d936, #ff5522);
    border-radius: 12px;
    margin-bottom: 20px;
    color: white;
}

.balance h3 {
    font-size: 16px;
    opacity: 0.9;
    margin-bottom: 8px;
}

.balance h2 {
    font-size: 36px;
    margin: 10px 0;
    color: white;
}

.balance-status {
    font-size: 14px;
    padding: 6px 12px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 20px;
    display: inline-block;
}

.negative {
    color: #ffebee;
}

.positive {
    color: #fff;
}

.transactions {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 2px 10px rgba(0,0,0,0.08);
}

.transaction-item {
    padding: 16px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.transaction-item:last-child {
    border-bottom: none;
}

.transaction-info {
    flex: 1;
}

.transaction-title {
    font-weight: 600;
    margin-bottom: 4px;
}

.transaction-date {
    color: var(--gray);
    font-size: 14px;
}

.transaction-value {
    font-weight: bold;
    font-size: 18px;
}

.credit {
    color: var(--success);
}

.debit {
    color: var(--danger);
}

.tabs {
    display: flex;
    margin-bottom: 20px;
    background: #f0f0f0;
    border-radius: 10px;
    padding: 4px;
}

.tab {
    flex: 1;
    text-align: center;
    padding: 12px;
    cursor: pointer;
    border-radius: 8px;
    transition: all 0.3s;
    font-weight: 600;
}

.tab.active {
    background: white;
    color: var(--primary);
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}

.action-buttons {
    display: flex;
    gap: 12px;
    margin-top: 20px;
}

.action-buttons button {
    flex: 1;
}

nav {
    position: fixed;
    bottom: 0;
    left: 0;
    right: 0;
    background: white;
    display: flex;
    justify-content: space-around;
    box-shadow: 0 -4px 12px rgba(0,0,0,0.1);
    padding: 12px 0;
    z-index: 100;
}

.nav-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    flex: 1;
    color: var(--gray);
    font-size: 13px;
    position: relative;
    cursor: pointer;
}

.nav-item i {
    font-size: 20px;
    margin-bottom: 4px;
}

.nav-item.active {
    color: var(--primary);
}

.customer-status {
    font-size: 14px;
    padding: 4px 10px;
    border-radius: 12px;
}

.status-good {
    background: #E8F5E9;
    color: var(--success);
}

.status-warning {
    background: #FFF8E1;
    color: var(--warning);
}

.status-bad {
    background: #FFEBEE;
    color: var(--danger);
}

.search-bar {
    display: flex;
    gap: 10px;
    margin-bottom: 16px;
}

.search-bar input {
    margin-bottom: 0;
    flex: 1;
}

.search-bar button {
    width: auto;
    padding: 14px;
    border-radius: 8px;
}

.customer-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
    border-bottom: 1px solid #eee;
}

.customer-info {
    flex: 1;
}

.customer-name {
    font-weight: 600;
    margin-bottom: 4px;
}

.customer-balance {
    color: var(--gray);
    font-size: 14px;
}

.notification-badge {
    background: var(--danger);
    color: white;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    position: absolute;
    top: 5px;
    right: 5px;
}

.tab-content {
    min-height: 300px;
}

.help-text {
    text-align: center;
    color: var(--gray);
    margin: 30px 0;
    font-size: 14px;
}

.help-text i {
    font-size: 40px;
    margin-bottom: 10px;
    color: #ddd;
    display: block;
}

.notification-item {
    padding: 12px;
    border-bottom: 1px solid #eee;
}

.notification-item:last-child {
    border-bottom: none;
}

.notification-title {
    font-weight: bold;
    margin-bottom: 4px;
}

.notification-content {
    font-size: 14px;
    color: var(--gray);
}

.notification-time {
    font-size: 12px;
    color: var(--gray);
    margin-top: 4px;
}

.firebase-config {
    background: #fff3cd;
    border: 1px solid #ffeaa7;
    border-radius: 8px;
    padding: 15px;
    margin: 20px 0;
}

.firebase-config h3 {
    color: #856404;
    margin-top: 0;
}

.firebase-config ol {
    padding-left: 20px;
}

.firebase-config li {
    margin-bottom: 10px;
}
/* Garantir que modais estejam ocultos por padrão */
.modal {
    display: none;
    position: fixed;
    z-index: 1000;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    align-items: center;
    justify-content: center;
}

.modal.hidden {
    display: none;
}

.modal:not(.hidden) {
    display: flex;
}
// Estado para produtos da compra atual
let currentSaleProducts = [];

// Função para formatar moeda
function formatCurrency(value) {
    return new Intl.NumberFormat('pt-BR', {
        style: 'currency',
        currency: 'BRL'
    }).format(value);
}

// Função para atualizar o resumo da venda
function updateSaleSummary() {
    const totalItems = currentSaleProducts.reduce((sum, product) => sum + product.quantity, 0);
    const totalValue = currentSaleProducts.reduce((sum, product) => sum + (product.price * product.quantity), 0);
    
    document.getElementById('total-items').textContent = totalItems;
    document.getElementById('total-value').textContent = formatCurrency(totalValue);
}

// Função para renderizar a lista de produtos
function renderProductsList() {
    const container = document.getElementById('products-list');
    
    if (currentSaleProducts.length === 0) {
        container.innerHTML = `
            <div class="help-text">
                <i class="fas fa-shopping-cart"></i>
                <p>Nenhum produto adicionado ainda.</p>
            </div>
        `;
        return;
    }
    
    container.innerHTML = '';
    
    currentSaleProducts.forEach((product, index) => {
        const productElement = document.createElement('div');
        productElement.className = 'product-item';
        productElement.innerHTML = `
            <div class="product-info">
                <div class="product-name">${product.name}</div>
                <div class="product-details">
                    <span>Qtd: ${product.quantity}</span>
                    <span>Preço: ${formatCurrency(product.price)}</span>
                    <span>Total: ${formatCurrency(product.price * product.quantity)}</span>
                </div>
            </div>
            <div class="product-actions">
                <button class="product-action-btn edit-product" data-index="${index}">
                    <i class="fas fa-edit"></i>
                </button>
                <button class="product-action-btn delete-product" data-index="${index}">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        
        container.appendChild(productElement);
    });
    
    // Adicionar event listeners para os botões
    document.querySelectorAll('.edit-product').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const index = e.currentTarget.getAttribute('data-index');
            editProduct(index);
        });
    });
    
    document.querySelectorAll('.delete-product').forEach(btn => {
        btn.addEventListener('click', (e) => {
            const index = e.currentTarget.getAttribute('data-index');
            deleteProduct(index);
        });
    });
}

// Função para adicionar produto
function addProduct() {
    const name = document.getElementById('product-name').value.trim();
    const quantity = parseInt(document.getElementById('product-quantity').value);
    const price = parseFloat(document.getElementById('product-price').value);
    
    if (!name || isNaN(quantity) || quantity <= 0 || isNaN(price) || price <= 0) {
        alert('Por favor, preencha todos os campos corretamente.');
        return;
    }
    
    const product = {
        id: Date.now(), // ID único para o produto
        name: name,
        quantity: quantity,
        price: price
    };
    
    currentSaleProducts.push(product);
    renderProductsList();
    updateSaleSummary();
    
    // Limpar o formulário
    document.getElementById('product-name').value = '';
    document.getElementById('product-quantity').value = '1';
    document.getElementById('product-price').value = '';
    
    // Fechar o modal
    document.getElementById('product-modal').classList.add('hidden');
}

// Função para editar produto
function editProduct(index) {
    const product = currentSaleProducts[index];
    
    // Preencher o modal com os dados do produto
    document.getElementById('product-name').value = product.name;
    document.getElementById('product-quantity').value = product.quantity;
    document.getElementById('product-price').value = product.price;
    
    // Mostrar o modal
    document.getElementById('product-modal').classList.remove('hidden');
    
    // Alterar o comportamento do botão para editar
    const addBtn = document.getElementById('add-product-btn');
    addBtn.textContent = 'Atualizar Produto';
    addBtn.onclick = function() {
        updateProduct(index);
    };
}

// Função para atualizar produto
function updateProduct(index) {
    const name = document.getElementById('product-name').value.trim();
    const quantity = parseInt(document.getElementById('product-quantity').value);
    const price = parseFloat(document.getElementById('product-price').value);
    
    if (!name || isNaN(quantity) || quantity <= 0 || isNaN(price) || price <= 0) {
        alert('Por favor, preencha todos os campos corretamente.');
        return;
    }
    
    currentSaleProducts[index] = {
        ...currentSaleProducts[index],
        name: name,
        quantity: quantity,
        price: price
    };
    
    renderProductsList();
    updateSaleSummary();
    
    // Limpar e resetar o modal
    document.getElementById('product-modal').classList.add('hidden');
    document.getElementById('product-name').value = '';
    document.getElementById('product-quantity').value = '1';
    document.getElementById('product-price').value = '';
    
    // Resetar o botão
    const addBtn = document.getElementById('add-product-btn');
    addBtn.textContent = 'Adicionar Produto';
    addBtn.onclick = addProduct;
}

// Função para deletar produto
function deleteProduct(index) {
    if (confirm('Tem certeza que deseja remover este produto?')) {
        currentSaleProducts.splice(index, 1);
        renderProductsList();
        updateSaleSummary();
    }
}

// Função para mostrar detalhes da venda
function showSaleDetails(sale) {
    const modalContent = document.getElementById('sale-details-content');
    
    try {
        const products = typeof sale.products === 'string' ? JSON.parse(sale.products) : sale.products;
        const total = products.reduce((sum, product) => sum + (product.price * product.quantity), 0);
        
        modalContent.innerHTML = `
            <div class="sale-details">
                <div class="detail-item">
                    <div class="detail-label">Cliente</div>
                    <div class="detail-value">${sale.client_name || 'N/A'}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Data</div>
                    <div class="detail-value">${new Date(sale.created_at).toLocaleDateString('pt-BR')}</div>
                </div>
                
                <div class="detail-item">
                    <div class="detail-label">Observações</div>
                    <div class="detail-value">${sale.notes || 'Nenhuma'}</div>
                </div>
                
                <h3>Produtos</h3>
                <table class="products-table">
                    <thead>
                        <tr>
                            <th>Produto</th>
                            <th>Qtd</th>
                            <th>Preço Unit.</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${products.map(product => `
                            <tr>
                                <td>${product.name}</td>
                                <td>${product.quantity}</td>
                                <td>${formatCurrency(product.price)}</td>
                                <td class="text-right">${formatCurrency(product.price * product.quantity)}</td>
                            </tr>
                        `).join('')}
                    </tbody>
                    <tfoot>
                        <tr>
                            <td colspan="3" style="text-align: right; font-weight: bold;">Total:</td>
                            <td class="text-right" style="font-weight: bold;">${formatCurrency(total)}</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        `;
    } catch (error) {
        modalContent.innerHTML = `
            <div class="help-text">
                <i class="fas fa-exclamation-triangle"></i>
                <p>Erro ao carregar detalhes da venda.</p>
            </div>
        `;
    }
    
    document.getElementById('sale-details-modal').classList.remove('hidden');
}

// Event Listeners para os novos elementos
document.getElementById('add-product-button').addEventListener('click', function() {
    // Resetar o modal
    document.getElementById('product-name').value = '';
    document.getElementById('product-quantity').value = '1';
    document.getElementById('product-price').value = '';
    
    // Configurar o botão para adicionar
    const addBtn = document.getElementById('add-product-btn');
    addBtn.textContent = 'Adicionar Produto';
    addBtn.onclick = addProduct;
    
    // Mostrar o modal
    document.getElementById('product-modal').classList.remove('hidden');
});

document.getElementById('add-product-btn').addEventListener('click', addProduct);

// Fechar modais quando clicar no X
document.querySelectorAll('.close').forEach(closeBtn => {
    closeBtn.addEventListener('click', function() {
        const modalId = this.getAttribute('data-modal');
        document.getElementById(modalId).classList.add('hidden');
    });
});

// Fechar modais quando clicar fora deles
window.addEventListener('click', function(event) {
    if (event.target.classList.contains('modal')) {
        event.target.classList.add('hidden');
    }
});

// Modificar a função de registrar venda
document.getElementById('register-sale-btn').addEventListener('click', async function() {
    const clientSelect = document.getElementById('client-select');
    const clientId = clientSelect.value;
    const notes = document.getElementById('sale-notes').value.trim();
    
    if (!clientId) {
        alert('Por favor, selecione um cliente.');
        return;
    }
    
    if (currentSaleProducts.length === 0) {
        alert('Por favor, adicione pelo menos um produto.');
        return;
    }
    
    try {
        showLoading('Registrando venda...');
        
        // Calcular o total
        const total = currentSaleProducts.reduce((sum, product) => sum + (product.price * product.quantity), 0);
        
        // Registrar a venda no Supabase
        const { data, error } = await supabase
            .from('sales')
            .insert([
                {
                    client_id: clientId,
                    products: currentSaleProducts,
                    total_amount: total,
                    notes: notes,
                    user_id: appState.currentUser.id
                }
            ])
            .select();
        
        if (error) throw error;
        
        // Registrar também como transação
        const { error: transactionError } = await supabase
            .from('transactions')
            .insert([
                {
                    user_id: clientId,
                    amount: total,
                    type: 'debit',
                    description: `Compra - ${currentSaleProducts.length} itens`,
                    sale_id: data[0].id
                }
            ]);
        
        if (transactionError) throw transactionError;
        
        alert('Venda registrada com sucesso!');
        
        // Limpar o formulário
        currentSaleProducts = [];
        renderProductsList();
        updateSaleSummary();
        document.getElementById('sale-notes').value = '';
        clientSelect.value = '';
        
        // Recarregar os dados
        if (appState.userType === 'merchant') {
            loadMerchantData();
        }
        
        hideLoading();
    } catch (error) {
        hideLoading();
        handleSupabaseError(error, 'registro de venda');
    }
});
